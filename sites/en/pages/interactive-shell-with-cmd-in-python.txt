=title Create your own interactive shell with cmd in Python
=timestamp 2018-02-15T22:30:01
=indexes cmd, CLI
=status show
=books python
=author szabgab
=archive 1
=comments_disqus_enable 0

=abstract start

When writing a Command Line Interface for an application it could be nice to have an interactive shell
with command completition and history. The <a href="https://docs.python.org/3/library/cmd.html">cmd</a>
library of Python provides a framework for that.

We will build an application step-by-step. Scroll down to the <a href="#full">end of the page</a> to see a full example
with all the bells and whistles.

=abstract end

<h2>Skeleton of the Interactive shell</h2>

The recommendation is to subclass the Cmd class, so that's what we do here, though as being a skeleton
we don't do anything else with it.

<include file="examples/python/cli/skeleton.py">

We create an instance object of the <hl>MyPrompt</hl> class and immediately call the <hl>cmdloop</hl> method.
We could have used a temporary variable there if we wanted to be a bit more verbose like this:

<code>
p = MyPrompt()
p.cmdloop()
</code>

but the result is the same.

When we run this script it will display a default prompt:

<code>
(Cmd)
</code>

You can't do much with it. You can type in <hl>?</hl> and press ENTER to get the following help:

<code>
Documented commands (type help <topic>):
========================================
help
</code>

help
# (Cmd) Ctrl-C

You can ask for help on <hl>help</hl> by typing in:

<code>
help help
</code>

And it will print:

<code>
List available commands with "help" or detailed help with "help cmd".
</code>

If you would like to exit the application you need to press <hl>Ctlr-C</hl> and get a <hl>KeyboardInterrupt</hl>.

<h2>First commands</h2>

You can add commands to the system by implementing the corresponding <hl>do_*</hl> methods.

<include file="examples/python/cli/commands.py">

We implemented two commands: <hl>exit</hl> and <hl>add</hl>.

When we run the script it will show use the standard prompt:

<code>
(Cmd)
</code>

If at this point we press <hl>TAB</hl> twice we get the list of all the available command. In our case that is

<code>
add   exit  help
</code>

If we type in <hl>help</hl> we get the following output:

<code>
(Cmd) help

Documented commands (type help <topic>):
========================================
help

Undocumented commands:
======================
add  exit
</code>

If we type in <hl>help add</hl> as the help window suggests for the documented commands we get:

<code>
(Cmd) help add
*** No help on add
</code>

If we type in <hl>add</hl> followed by some text and press ENTER the system will run the <hl>do_add</hl> method and
pass the text to the method. In our case we get:

<code>
(Cmd) add Hello World
Adding 'Hello World'
</code>

If we type in <hl>exit</hl> it will call the <hl>do_exit</hl> method, print "Bye" and exit the <hl>cmdloop</hl>.
In our case it means it will go on and print the string "after".

<code>
(Cmd) exit
Bye
after
</code>


<h2>Help - documenting commands</h2>

As you could see above, the built-in <hl>help</hl> command had some documentation, but the two command we added did not
have any. There are two ways to add documentation to a command. Either by adding a method with the <hl>help_*</hl> prefix
or by adding docstring to the appropriate <hl>do_*</hl> method.

<include file="examples/python/cli/help.py">

Entering <hl>?</hl> not all the commands are listed under the "Documented commands":

<code>
(Cmd) ?

Documented commands (type help <topic>):
========================================
add  exit  help
</code>


We can get help by typing in <hl>help</hl> and the name of the command:

<code>
(Cmd) help add
Add a new entry to the system.
</code>

<code>
(Cmd) help exit
exit the application.
</code>

We can still exit the application:

<code>
(Cmd) exit
Bye
</code>


<h2>Prompt and banner</h2>

The default prompt is <hl>(Cmd)</hl> but we can override it using the <hl>prompt</hl> attribute of the class.

In addition we can set a text to be the banner, that is the text shown when we launch the application, before the first prompt
is shown. We only need to assign the text to the <hl>intro</hl> attribute.

<include file="examples/python/cli/prompt.py">

If we run this application we'll see:

<code>
Welcome! Type ? to list commands
pb>
</code>


<h2>Default actions</h2>

Sometime you might want to be able to freely parse the input. For example if you'd like to implement short, one-letter alternatives
of longer commands. If you implement a method called <hl>default</hl> that method will be called every time a command is
entered that does not correspond to any of the <hl>do_*</hl> methods.

<include file="examples/python/cli/default.py">

In this example we catch stand-alone <hl>x</hl> and <hl>q</hl> characters and call the <hl>do_exit</hl> method for them.


<h2>Ctrl-d EOF</h2>

You might have noticed thet if you press <hl>Ctrl-d</hl>, the standard way to exit most command line application, our examples print <b>*** Unknown syntax: EOF</b>. That's because Ctrl-d send an EOF (End Of File) signal and by default Cmd does not know what to do with it.

The solution is to implement the <hl>do_EOF</hl> method that will be called when the user presses <hl>Ctl-d</hl>. As we already have a <hl>do_exit</hl> method, we can just assign that to the <hl>do_EOF</hl> and have both do the same. In order to provide help for the EOF, we can include a function
called <hl>help_EOF</hl> that is assigned the <hl>help_exit</hl> function.

<h2 id="full">Full example</h2>

This examples includes all of the above techniques.

<include file="examples/python/cli/full.py">


See also the <a href="https://wiki.python.org/moin/CmdModule">Cmd wiki page</a>.

